# basic definition of list
nil = (): 0
cons = (x, y): (i): ?(eq(i, 0), (): x, (): y)
car = (l): l(0)
cdr = (l): l(1)

# access list via index
at-impl = (self, l, i):
    ?(le(i, 0),
        (): l(0),
        (): self(self, l(1), -(i, 1)))
at = (l, i): at-impl(at-impl, l, i)

# stack operation
push = (l, x): cons(x, l)
top = car
pop = cdr

# create list
l = cons(4, nil)
l = push(l, 3)
l = push(l, 2)
l = push(l, 1)

# print elements in list
<<<(at(l, 0))
<<<(at(l, 1))
<<<(at(l, 2))
<<<(at(l, 3))

# some common functions
map-impl = (self, l, f):
    cons(f(l(0)),
        ?(is(l(1), nil),
            (): nil,
            (): self(self, l(1), f)))
map = (l, f): map-impl(map-impl, l, f)
foldr-impl = (self, l, f, x):
    f(l(0),
        ?(is(l(1), nil),
            (): x,
            (): self(self, l(1), f, x)))
foldr = (l, f, x): foldr-impl(foldr-impl, l, f, x)
foldl-impl = (self, l, f, x):
    ?(is(l(1), nil),
        (): f(x, l(0)),
        (): self(self, l(1), f, f(x, l(0))))
foldl = (l, f, x): foldl-impl(foldl-impl, l, f, x)

map(map(l, (x): +(x, 10)), <<<)
<<<(foldr(l, -, 0))
<<<(foldl(l, -, 0))
